//border b(t=0,2*pi){x=cos(t); y=sin(t); label = 1;};
//mesh Th = buildmesh(b(50));

// mesh Th = square(30,30,[-1 + 2 * x, -1 + 2 * y],flags = 1);

//real ro = 3.0;
//border so(t=0,2*pi){x = cos(t); y=sin(t);};
//mesh Th = buildmesh(so(80));
///////////////////////////
bool savefile = 0;
////////////////////////
include "mesh.edp"
include "indnod.edp"

plot(Th);

func f = 1 / (2 * pi) * log(1 / ((x+0.51)^2 + y^2)^0.5);
func uexpx = (3 * x^2 - 3 * y^2);
func uexpy = ( - 6 * x * y);
//func gamma = (x-0.1)^2 + (y-0.6)^2 - 0.04<= 0;

fespace Vh(Th, P1);
Vh uh, vh;
////////////////////////////////////////////////////////
problem lap(uh, vh) = 
	int2d(Th)(dx(uh) * dx(vh) + dy (uh) * dy(vh))
	-int1d(Th,1)((uexpx * N.x + uexpy * N.y) * vh);
//	+on(1,2,3,4, uh = f);
problem lap2(uh, vh) = 
	int2d(Th)((1 + 1 * gamma) * dx(uh) * dx(vh) + dy (uh) * dy(vh))
	-int1d(Th,1)((uexpx * N.x + uexpy * N.y) * vh);
//	+on(1,2,3,4, uh = f);
////////////////////////////////////////////////////
lap;
Vh fh = f;
plot(Th,uh,fill = 1,dim = 3, value = 1);
lap2;
plot(Th, uh,fill = 1,dim = 3, value = 1);

///////////////////////////////////////
// Th = adaptmesh(Th, uh);
//fespace Nh(Th, P1);
// Nh fx = N.y;
// real a = int1d(Th, so)(N.x);
// lap2;
/////////////////////////////////////////////

// compute nboundary
int nboundary = getnboundary();
int[int] indnod(nboundary);
// compute indnod
getindnod(indnod, nboundary);
cout << "nboundary = " << nboundary << endl;
cout << "ndof = " << VhP1.ndof << endl;
cout << indnod << endl;


Vh fx = x, fy = y;
if(savefile)
{
ofstream filex("out/incx-500.txt");
ofstream filey("out/incy-500.txt");
ofstream fileu("out/incu-500.txt");

for(int k=0; k < nboundary; k++){
	fileu << uh[][indnod[k]] << endl;
	filex << fx[][indnod[k]] << endl;
	filey << fy[][indnod[k]] << endl;	
	} 
}
// uh = 0;
// for(int k=0; k<nboundary; k++){
// uh = 0;
// uh[][indnod[k]] = 1;
// plot(uh);
// }
